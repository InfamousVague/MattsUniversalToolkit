name: Generate App Installers
on:
    pull_request:
        types: [opened, synchronize, reopened, edited]
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    build-releases:
        permissions: write-all
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest" # for Arm based macs (M1 and above).
                      args: "--target aarch64-apple-darwin"
                    - platform: "macos-latest" # for Intel based macs.
                      args: "--target x86_64-apple-darwin"
                    - platform: "ubuntu-latest"
                      args: ""
                    - platform: "windows-latest"
                      args: ""

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4.2.0

            - name: setup node
              uses: actions/setup-node@v4.0.4
              with:
                  node-version: lts/*

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: install frontend dependencies
              run: npm install

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  args: ${{ matrix.args }}

            - name: Upload Ubuntu installer
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-ubuntu
                  path: src-tauri/target/release/bundle/deb/*.deb
                  retention-days: 5

            - name: Build Web Assets ðŸ”¨
              if: matrix.platform == 'ubuntu-latest'
              run: npm run build

            - name: Set up JDK
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/setup-java@v4.4.0
              with:
                  distribution: "temurin"
                  java-version: "21"

            - name: Set up Android SDK
              if: matrix.platform == 'ubuntu-latest'
              uses: android-actions/setup-android@v3.2.1

            - name: Sync Capacitor Assets ðŸ”¨
              if: matrix.platform == 'ubuntu-latest'
              run: npx cap sync && npx cap copy android && cd android && ./gradlew assembleDebug

            - name: Upload APK
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-android
                  path: android/app/build/outputs/apk/debug/app-debug.apk
                  retention-days: 5

            - name: Setup Certificate for Windows Signing
              if: matrix.platform == 'windows-latest'
              run: |
                  echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > certificate.p12
              shell: bash

            - name: Set variables for Windows Signing
              if: matrix.platform == 'windows-latest'
              id: variables
              run: |
                  dir
                  echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
                  echo "KEYPAIR_NAME=gt-standard-keypair" >> $GITHUB_OUTPUT
                  echo "CERTIFICATE_NAME=gt-certificate" >> $GITHUB_OUTPUT
                  echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
                  echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
                  echo "SM_CLIENT_CERT_FILE=certificate.p12" >> "$GITHUB_ENV"
                  echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
                  echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
                  echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
                  echo "C:\Program Files\DigiCert\DigiCert Keylocker Tools" >> $GITHUB_PATH
              shell: bash

            - name: Setup Keylocker KSP on windows
              if: matrix.platform == 'windows-latest'
              run: |
                  curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/Keylockertools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o Keylockertools-windows-x64.msi 
                  msiexec /i Keylockertools-windows-x64.msi /quiet /qn
                  smksp_registrar.exe list 
                  smctl.exe keypair ls 
                  C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
              shell: cmd

            - name: Certificates Sync
              if: matrix.platform == 'windows-latest'
              run: |
                  smctl windows certsync
              shell: cmd

            - name: Signing using Signtool
              if: matrix.platform == 'windows-latest'
              run: |
                  signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "./src-tauri/target/release/bundle/msi/*.msi"

            - name: Delete cert file
              if: matrix.platform == 'windows-latest'
              run: Remove-Item -Force certificate.p12

            - name: Build Linux Installer
              if: matrix.platform == 'ubuntu-latest'
              run: bash build_linux_installer.sh uplink ${{ github.ref_name }} amd64

            - name: Codesign and Build executable MacOS
              if: matrix.platform == 'macos-latest'
              continue-on-error: true
              env:
                  MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
                  MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
                  MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
                  MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
                  MACOS_KEYCHAIN_NAME: ${{ secrets.MACOS_KEYCHAIN_NAME }}
                  MACOS_CERT_ID: ${{secrets.MACOS_CERT_ID}}
              run: |
                  echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
                  security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" builduplink.keychain
                  security default-keychain -s builduplink.keychain
                  security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" builduplink.keychain
                  security set-keychain-settings builduplink.keychain
                  security import certificate.p12 -k builduplink.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
                  security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" builduplink.keychain
                  security find-identity -p codesigning -v
                  security list-keychains
                  make dmg SIGNING_KEY="$MACOS_CERT_ID"

            - name: "Notarize executable MacOS"
              if: matrix.platform == 'macos-latest'
              env:
                  PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
                  PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
                  PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
                  MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
              run: |
                  echo "Create keychain profile"
                  xcrun notarytool store-credentials "uplink-notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
                  echo "Creating temp notarization archive"
                  ditto -c -k --keepParent "target/release/macos/Uplink.app" "notarization.zip"
                  echo "Notarize app"
                  xcrun notarytool submit "notarization.zip" --keychain-profile "uplink-notarytool-profile" --wait
                  echo "Attach staple"
                  xcrun stapler staple "target/release/macos/Uplink.app"

            - name: Create ZIP archive MacOS
              if: matrix.platform == 'macos-latest'
              run: |
                  ditto -c -k --sequesterRsrc --keepParent target/release/macos/Uplink.app Uplink-Mac-Universal.zip

            - name: Calculate hashes MacOS
              if: matrix.platform == 'macos-latest'
              run: |
                  shasum -a 256 Uplink-Mac-Universal.zip > Uplink-Mac-Universal.zip.sha256.txt

            - name: Upload macOS for Apple Silicon based Macs
              if: matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-macos-apple-silicon
                  path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
                  retention-days: 5

            - name: Upload macOS for Intel based Macs
              if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-macos-intel
                  path: src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
                  retention-days: 5

            - name: Upload MSI installer
              if: matrix.platform == 'windows-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-windows
                  path: src-tauri/target/release/bundle/msi/*.msi
                  retention-days: 5

            - name: Post Download Links for Artifacts
              if: success()
              uses: actions/github-script@v7.0.1
              with:
                  script: |
                      async function upsertComment(owner, repo, issue_number, purpose, body) {
                        const {data: comments} = await github.rest.issues.listComments(
                          {owner, repo, issue_number});
                        const marker = `<!-- bot: ${purpose} -->`;
                        body = marker + "\n" + body;
                        const existing = comments.filter((c) => c.body.includes(marker));
                        if (existing.length > 0) {
                          const last = existing[existing.length - 1];
                          console.info(`Updating comment ${last.id}`);
                          await github.rest.issues.updateComment({
                            owner, repo,
                            body,
                            comment_id: last.id,
                          });
                        } else {
                          console.info(`Creating a comment in issue / PR #${issue_number}`);
                          await github.rest.issues.createComment({issue_number, body, owner, repo});
                        }
                      }
                      const {owner, repo} = context.repo;
                      const run_id = ${{github.run_id}};  // Use current run id
                      const pull_requests = ${{ toJSON(github.event.pull_request) }};
                      if (!pull_requests) {
                        return core.error("This workflow doesn't match any pull requests!");
                      }
                      const artifacts = await github.paginate(
                        github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
                      if (!artifacts.length) {
                        return core.error(`No artifacts found`);
                      }
                      let body = `Download the app installers for this pull request:\n`;
                      for (const art of artifacts) {
                        body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
                      }
                      console.info("Review thread message body:", body);
                      await upsertComment(owner, repo, pull_requests.number,
                        "nightly-link", body);
