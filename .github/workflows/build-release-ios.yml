name: Build iOS Release

on:
    pull_request:
        types: [opened, synchronize, reopened, edited]

jobs:
    build-ios-release:
        runs-on: macos-latest
        permissions: write-all

        steps:
            # Checkout the code
            - name: Checkout Source
              uses: actions/checkout@v4.2.2

            # Set up Node.js
            - name: Setup Node.js
              uses: actions/setup-node@v4.1.0
              with:
                  node-version: lts/*

            # Install Rust
            - name: Install Rust Stable
              uses: dtolnay/rust-toolchain@stable

            # Install dependencies
            - name: Install Frontend Dependencies
              run: npm install

            # Install Tauri CLI
            - name: Install Tauri CLI
              run: npm install -g @tauri-apps/cli

            # Set Rust targets for iOS
            - name: Set Rust Target for iOS
              run: |
                  rustup target add aarch64-apple-ios
                  rustup target add x86_64-apple-ios
                  rustup target add aarch64-apple-ios-sim

            # Set up keychain and import certificate
            - name: Set Up Keychain and Import Certificate
              env:
                  APPLE_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
                  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
              run: |
                  security create-keychain -p "" build.keychain
                  security set-keychain-settings -lut 21600 build.keychain
                  echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
                  security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
                  security list-keychains -d user -s build.keychain
                  security unlock-keychain -p "" build.keychain
                  security set-key-partition-list -S apple-tool:,apple: -k "" build.keychain

            # Find and verify Xcode project
            - name: Find and Verify Xcode Project
              id: find_xcodeproj
              run: |
                  PROJECT_PATH="./src-tauri/gen/apple/uplink.xcodeproj"
                  if [ ! -d "$PROJECT_PATH" ]; then
                      echo "Xcode project not found at $PROJECT_PATH"
                      ALTERNATE_PROJECT_PATH=$(find ./src-tauri/gen/apple -name "*.xcodeproj" | head -n 1)
                      if [ -z "$ALTERNATE_PROJECT_PATH" ]; then
                          echo "No Xcode project found, exiting."
                          exit 1
                      fi
                      PROJECT_PATH="$ALTERNATE_PROJECT_PATH"
                  fi
                  echo "PROJECT_PATH=$PROJECT_PATH" >> $GITHUB_ENV

            # Build the iOS app with manual signing (no signingStyle flag)
            - name: Build iOS App
              env:
                  DEVELOPMENT_TEAM: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}  # Set Team ID
                  CODE_SIGN_IDENTITY: ${{ secrets.MACOS_CERTIFICATE_NAME }}   # Set Code Signing Identity
              run: |
                  xcodebuild -project "$PROJECT_PATH" \
                             -scheme uplink_iOS \
                             -destination generic/platform=iOS \
                             -archivePath App.xcarchive archive \
                             -allowProvisioningUpdates \
                             -codeSignIdentity "$CODE_SIGN_IDENTITY" \
                             -developmentTeam "$DEVELOPMENT_TEAM" \
                             -provisioningProfile ""  # Leave empty if no provisioning profile is needed

            # Export the IPA with manual signing (no signingStyle flag)
            - name: Export IPA
              env:
                  DEVELOPMENT_TEAM: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}  # Set Team ID
                  CODE_SIGN_IDENTITY: ${{ secrets.MACOS_CERTIFICATE_NAME }}   # Set Code Signing Identity
              run: |
                  xcodebuild -exportArchive -archivePath App.xcarchive \
                             -exportOptionsPlist ./src-tauri/ios/ExportOptions.plist \
                             -exportPath output \
                             -allowProvisioningUpdates \
                             -codeSignIdentity "$CODE_SIGN_IDENTITY" \
                             -developmentTeam "$DEVELOPMENT_TEAM" \
                             -provisioningProfile ""  # Leave empty if no provisioning profile is needed

            # Notarize the app
            - name: Notarize App
              env:
                  APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
                  APPLE_PASSWORD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
              run: |
                  xcrun altool --notarize-app -f output/App.ipa \
                               --primary-bundle-id "com.satellite.uplink.app" \
                               -u "$APPLE_ID" \
                               -p "$APPLE_PASSWORD"

            # Rename and prepare the IPA
            - name: Rename and Prepare IPA
              run: |
                  IPA_FILE="output/App.ipa"
                  NEW_IPA_FILE="output/Uplink_1.0.0.ipa"
                  mv "$IPA_FILE" "$NEW_IPA_FILE"

            # Upload the IPA as an artifact
            - name: Upload iOS IPA Artifact
              uses: actions/upload-artifact@v4.4.3
              with:
                  name: app-ios
                  path: output/Uplink_1.0.0.ipa
                  retention-days: 60

            # Clean up the keychain
            - name: Remove Temporary Keychain
              run: security delete-keychain build.keychain
