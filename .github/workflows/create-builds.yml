name: Generate App Installers
on:
    pull_request:
        types: [opened, synchronize, reopened, edited]
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    build-installers:
        permissions: write-all
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest"
                    - platform: "ubuntu-latest"
                    - platform: "windows-latest"

        runs-on: ${{ matrix.platform }}
        env:
          DOWNLOAD_LINK_WINDOWS: "https://example.com/download/windows"
          DOWNLOAD_LINK_MAC: "https://example.com/download/mac"
          DOWNLOAD_LINK_LINUX: "https://example.com/download/linux"

        steps:
            - uses: actions/checkout@v4.2.2

            - name: setup node
              uses: actions/setup-node@v4.0.4
              with:
                  node-version: lts/*

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

            - name: install frontend dependencies
              run: npm install

            - uses: tauri-apps/tauri-action@v0.5.15
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Ubuntu installer
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-ubuntu
                  path: src-tauri/target/release/bundle/deb/*.deb
                  retention-days: 5

            - name: Build Web Assets ðŸ”¨
              if: matrix.platform == 'ubuntu-latest'
              run: npm run build

            - name: Set up JDK
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/setup-java@v4.4.0
              with:
                  distribution: "temurin"
                  java-version: "21"

            - name: Set up Android SDK
              if: matrix.platform == 'ubuntu-latest'
              uses: android-actions/setup-android@v3.2.1

            - name: Sync Capacitor Assets ðŸ”¨
              if: matrix.platform == 'ubuntu-latest'
              run: npx cap sync && npx cap copy android && cd android && ./gradlew assembleDebug

            - name: Upload APK
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-android
                  path: android/app/build/outputs/apk/debug/app-debug.apk
                  retention-days: 5

            - name: Upload macOS installer
              if: matrix.platform == 'macos-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-macos
                  path: src-tauri/target/release/bundle/dmg/*.dmg
                  retention-days: 5

            - name: Upload MSI installer
              if: matrix.platform == 'windows-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-windows
                  path: src-tauri/target/release/bundle/msi/*.msi
                  retention-days: 5

            - name: Generate manifest.json with platform-specific download links
              run: |
                cd static
                jq --arg windows "$DOWNLOAD_LINK_WINDOWS" \
                  --arg mac "$DOWNLOAD_LINK_MAC" \
                  --arg linux "$DOWNLOAD_LINK_LINUX" \
                '.download_links = { "Windows": $windows, "Mac": $mac, "Linux": $linux }' \
                manifest.json > updated_manifest.json
                
            - name: Commit and push updated manifest.json
              run: |
                git config --global user.name "github-actions[bot]"
                git config --global user.email "github-actions[bot]@users.noreply.github.com"
                git add static/manifest.json
                git commit -m "Update manifest.json with platform-specific download links"
                git push
           
            - name: Post Download Links for Artifacts
              if: success()
              uses: actions/github-script@v7.0.1
              with:
                  script: |
                      async function upsertComment(owner, repo, issue_number, purpose, body) {
                        const {data: comments} = await github.rest.issues.listComments(
                          {owner, repo, issue_number});
                        const marker = `<!-- bot: ${purpose} -->`;
                        body = marker + "\n" + body;
                        const existing = comments.filter((c) => c.body.includes(marker));
                        if (existing.length > 0) {
                          const last = existing[existing.length - 1];
                          console.info(`Updating comment ${last.id}`);
                          await github.rest.issues.updateComment({
                            owner, repo,
                            body,
                            comment_id: last.id,
                          });
                        } else {
                          console.info(`Creating a comment in issue / PR #${issue_number}`);
                          await github.rest.issues.createComment({issue_number, body, owner, repo});
                        }
                      }
                      const {owner, repo} = context.repo;
                      const run_id = ${{github.run_id}};  // Use current run id
                      const pull_requests = ${{ toJSON(github.event.pull_request) }};
                      if (!pull_requests) {
                        return core.error("This workflow doesn't match any pull requests!");
                      }
                      const artifacts = await github.paginate(
                        github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
                      if (!artifacts.length) {
                        return core.error(`No artifacts found`);
                      }
                      let body = `Download the app installers for this pull request:\n`;
                      for (const art of artifacts) {
                        body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
                      }
                      console.info("Review thread message body:", body);
                      await upsertComment(owner, repo, pull_requests.number,
                        "nightly-link", body);
