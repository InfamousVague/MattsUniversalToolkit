name: Generate Desktop Installers
on:
    pull_request:
        types: [opened, synchronize, reopened, edited]
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    publish-tauri:
        permissions: write-all
        strategy:
            fail-fast: false
            matrix:
                include:
                    - platform: "macos-latest" # for Arm based macs (M1 and above).
                      args: "--target aarch64-apple-darwin"
                    - platform: "macos-latest" # for Intel based macs.
                      args: "--target x86_64-apple-darwin"
                    - platform: "ubuntu-latest" # for Tauri v1 you could replace this with ubuntu-20.04.
                      args: ""
                    - platform: "windows-latest"
                      args: ""

        runs-on: ${{ matrix.platform }}
        steps:
            - uses: actions/checkout@v4.2.0

            - name: setup node
              uses: actions/setup-node@v4.0.4
              with:
                  node-version: lts/*

            - name: install Rust stable
              uses: dtolnay/rust-toolchain@stable
              with:
                  # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                  targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

            - name: install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-latest' # This must match the platform value defined above.
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
              # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
              # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

            - name: install frontend dependencies
              run: npm install # change this to npm, pnpm or bun depending on which one you use.

            - uses: tauri-apps/tauri-action@v0
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  args: ${{ matrix.args }}

            - name: Upload Ubuntu installer
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-ubuntu
                  path: src-tauri/target/release/bundle/deb/*.deb
                  retention-days: 5

            - name: Build Web Assets ðŸ”¨
              if: matrix.platform == 'ubuntu-latest'
              run: npm run build

            - name: Set up JDK
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/setup-java@v4.4.0
              with:
                  distribution: "temurin"
                  java-version: "21"

            - name: Set up Android SDK
              if: matrix.platform == 'ubuntu-latest'
              uses: android-actions/setup-android@v3.2.1

            - name: Sync Capacitor Assets ðŸ”¨
              if: matrix.platform == 'ubuntu-latest'
              run: npx cap sync && npx cap copy android && cd android && ./gradlew assembleDebug

            - name: Upload APK
              if: matrix.platform == 'ubuntu-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-android
                  path: android/app/build/outputs/apk/debug/app-debug.apk
                  retention-days: 5

            - name: Upload MacOS for Apple Silicon based Macs
              if: matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-macos-apple-silicon
                  path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
                  retention-days: 5

            - name: Upload MacOS for Intel based Macs
              if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-macos-intel
                  path: src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
                  retention-days: 5

            - name: Upload MSI installer
              if: matrix.platform == 'windows-latest'
              uses: actions/upload-artifact@v4.4.0
              with:
                  name: build-windows
                  path: src-tauri/target/release/bundle/msi/*.msi
                  retention-days: 5

            - name: Post Download Links for Artifacts
              if: success()
              uses: actions/github-script@v7.0.1
              with:
                  script: |
                      async function upsertComment(owner, repo, issue_number, purpose, body) {
                        const {data: comments} = await github.rest.issues.listComments(
                          {owner, repo, issue_number});
                        const marker = `<!-- bot: ${purpose} -->`;
                        body = marker + "\n" + body;
                        const existing = comments.filter((c) => c.body.includes(marker));
                        if (existing.length > 0) {
                          const last = existing[existing.length - 1];
                          console.info(`Updating comment ${last.id}`);
                          await github.rest.issues.updateComment({
                            owner, repo,
                            body,
                            comment_id: last.id,
                          });
                        } else {
                          console.info(`Creating a comment in issue / PR #${issue_number}`);
                          await github.rest.issues.createComment({issue_number, body, owner, repo});
                        }
                      }
                      const {owner, repo} = context.repo;
                      const run_id = ${{github.run_id}};  // Use current run id
                      const pull_requests = ${{ toJSON(github.event.pull_request) }};
                      if (!pull_requests) {
                        return core.error("This workflow doesn't match any pull requests!");
                      }
                      const artifacts = await github.paginate(
                        github.rest.actions.listWorkflowRunArtifacts, {owner, repo, run_id});
                      if (!artifacts.length) {
                        return core.error(`No artifacts found`);
                      }
                      let body = `Download the desktop installers for this pull request:\n`;
                      for (const art of artifacts) {
                        body += `\n* [${art.name}.zip](https://nightly.link/${owner}/${repo}/actions/artifacts/${art.id}.zip)`;
                      }
                      console.info("Review thread message body:", body);
                      await upsertComment(owner, repo, pull_requests.number,
                        "nightly-link", body);
